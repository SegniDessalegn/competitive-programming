class UnionFind:
    def __init__(self, N):
        self.reps = {i:i for i in range(N)}
    
    def find(self, x):
        if x != self.reps[x]:
            self.reps[x] = self.find(self.reps[x])
        return self.reps[x]
    
    def union(self, x, y):
        x_rep = self.find(x)
        y_rep = self.find(y)
        
        self.reps[x_rep] = y_rep


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        U = UnionFind(N)
        
        for i in range(N):
            for j in range(N):
                if graph[i][j]:
                    U.union(i, j)
        
        for i in range(N):
            U.find(i)
        
        reps_count = Counter(list(U.reps.values()))
        valids = []
        for i in range(len(initial)):
            valid = True
            for j in range(len(initial)):
                if i != j and U.reps[initial[i]] == U.reps[initial[j]]:
                    valid = False
            if valid:
                valids.append(initial[i])
        
        valids.sort(key = lambda x: (-reps_count[U.find(x)], x))
        if valids:
            return valids[0]
        
        initial.sort(key = lambda x: (reps_count[U.find(x)], x))
        
        return initial[0]
    